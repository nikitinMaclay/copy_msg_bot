import asyncio
import datetime
import random
import time
import traceback
from colorama import Fore
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from config import TOKEN
from aiogram.types.callback_query import CallbackQuery
from mark_ups import menu_markup_for_reg, markup_continue_after_id, markup_continue_after_hash, markup_receive_code,\
    markup_continue_after_id_reload, markup_continue_after_hash_reload, markup_continue_after_phone, \
    markup_continue_after_phone_reload, markup_receive_code_reload, markup_continue_after_group, \
    markup_accept_message, markup_menu
from telegram_parser_api import API
from sql_commands import *

ADMIN = 508537898
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

spam_text = [
    "–î–æ–±—Ä—ã–π –¥–µ–Ω—å. –£–≤–∏–¥–µ–ª –≤ —á–∞—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. "
    "–£ –Ω–∞—Å –µ—Å—Ç—å –≤–∏–∑–æ–≤—ã–π —á–∞—Ç. –¢–∞–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–∞—é—Ç –∞–¥–º–∏–Ω—ã –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏. –ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Ç—É–¥–∞ ‚òù",
    "—Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç —Ä–∞–∑–º–µ—Å—Ç–∏–ª –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ù–∞–¥–µ—é—Å—å –≤–∞—à –≤–æ–ø—Ä–æ—Å —Ä–µ—à–∏—Ç—Å—è üôè",
]


class Moder:
    def __init__(self, api: API = API(), user_id: int = random.randrange(-123123, 0), active=False):
        self.api = api
        self.moder_id = user_id
        self.active = active
        self.last_message = ''
        self.users = []
        self.username = ''
        self.all_messages_base = {}
        self.counter = 0
        self.flag = True

    async def main_sender(self, timer=25):
        while True:
            if self.moder_id == ADMIN:
                offset = datetime.timezone(datetime.timedelta(hours=3))
                t = datetime.datetime.now(offset)
                if t.hour == 23 and t.minute == 0:
                    final_message = ''
                    for moder in moders:
                        final_message += f"–û—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å:\n–ú–µ–Ω–µ–¥–∂–µ—Ä: @{moder.username}:\n" \
                                         f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω–∞–ø–∏—Å–∞–ª –º–æ–¥–µ—Ä–∞—Ç–æ—Ä: {len(moder.users)}\n" \
                                         f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: "
                        for u in moder.users:
                            final_message += f"@{u} "
                        final_message += '\n'
                    await bot.send_message(ADMIN, final_message)
                    await asyncio.sleep(60)
            if self.active:
                print(self.username, f"{datetime.datetime.now().hour}:{datetime.datetime.now().minute}")
                if datetime.datetime.now().minute == 59:
                    self.flag = True
                if datetime.datetime.now().minute == 0 and self.flag:
                    await bot.send_message(self.moder_id, f'–ü—Ä–∏–Ω—è—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {self.counter}')
                    await self.api.client.disconnect()
                    await asyncio.sleep(5)
                    await self.api.client.connect()
                    self.flag = False
                try:
                    for chat in self.api.target_group:
                        result = await self.api.parse(chat, limit=15)
                        if result == 0:
                            res_msg = f'–ß–∞—Ç {chat.title} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û–Ω —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏.\n\n' \
                                      f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –µ—â–µ —Ä–∞–∑'
                            my_message = await bot.send_message(self.moder_id, res_msg)
                            self.api.target_group.remove(chat)
                            print(self.moder_id, my_message.text)
                        else:
                            await asyncio.sleep(5)
                            for msg in result:
                                res_msg = f'–ß–∞—Ç: <a href="https://t.me/{chat.username}">{chat.title}</a>\n' \
                                          f'–°–æ–æ–±—â–µ–Ω–∏–µ:\n' \
                                          f'{msg.message}'
                                my_message = await bot.send_message(self.moder_id, res_msg,
                                                                    reply_markup=markup_accept_message,
                                                                    parse_mode=types.ParseMode.HTML,
                                                                    disable_web_page_preview=True)
                                self.all_messages_base[my_message.message_id] = {
                                    "from_id": msg.from_id,
                                    "message": msg.message
                                }
                                print([int(self.moder_id),
                                       int(my_message.message_id),
                                       int(msg.from_id.user_id),
                                       str(msg.message)])
                                add_all_messages([int(self.moder_id),
                                                  int(my_message.message_id),
                                                  int(msg.from_id.user_id),
                                                  str(msg.message)
                                                  ])
                                await asyncio.sleep(1)
                            await asyncio.sleep(timer)
                    await asyncio.sleep(60)
                except:
                    print(traceback.format_exc())
                    print(Fore.RED + f'API –º–æ–¥–µ—Ä–∞ {self.moder_id}. –ë–æ—Ç —É–ø–∞–ª –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã')
            else:
                await asyncio.sleep(timer)


moders = {
    0: Moder()
}


class AddGroup(StatesGroup):
    waiting_for_group = State()


async def group_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('–û—Ç–º–µ–Ω–∞')
    await bot.send_message(text="–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É:", chat_id=message.chat.id, reply_markup=keyboard)
    await AddGroup.waiting_for_group.set()


async def group_chosen(message: types.Message, state: FSMContext):
    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=markup_menu)
        return
    if "http" not in message.text.lower():
        await bot.send_message(message.from_user.id, "–§–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≤–µ—Ä–µ–Ω\n–í–≤–µ–¥–∏—Ç–µ"
                                                     " —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –ø–æ–≤—Ç–æ—Ä–Ω–æ")
        await bot.delete_message(chat_id=message.from_user.id,
                                 message_id=message.message_id)
        return
    else:
        # if len(chats) < 10:
        adding = add_group_to_base(username=message.from_user.username, url=message.text)
        print(adding)
        if adding:
            get_chat_res = await moders[message.from_user.id].api.get_chat(message.text)
            if get_chat_res:
                await bot.send_message(message.from_user.id, "–ì—Ä—É–ø–ø–∞ –ø—Ä–∏–Ω—è—Ç–∞", reply_markup=markup_menu)
                await state.finish()
                print(get_groups(message.from_user.username))
                await moders[message.from_user.id].main_sender()
            else:
                await bot.send_message(message.from_user.id, "–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."
                                                             " –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ!\n"
                                                             "–ò —á—Ç–æ –≥—Ä—É–ø–ø–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
                return
        else:
            await bot.send_message(message.from_user.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –≥—Ä—É–ø–ø—É,"
                                                         " —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")
            return
        # else:
        #    await message.answer("–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥—Ä—É–ø–ø.\n"
        #                         "–£–¥–∞–ª–∏—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ –≤–∞–º –≥—Ä—É–ø–ø—ã, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ.", reply_markup=markup_menu)


def register_handlers_add_group(dp: Dispatcher):
    dp.register_message_handler(group_start, Text(equals="–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", ignore_case=True), state="*")
    dp.register_message_handler(group_start, commands="add_group", state="*")
    dp.register_message_handler(group_chosen, state=AddGroup.waiting_for_group)


class DeleteGroup(StatesGroup):
    waiting_for_delete_group = State()


async def delete_group_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup()
    buttons = []
    if moders[message.from_user.id].api.target_group:
        for chat in moders[message.from_user.id].api.target_group:
            buttons.append(chat.title)
        keyboard.row(*buttons).add('–û—Ç–º–µ–Ω–∞')
        await bot.send_message(text="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≥—Ä—É–ø–ø—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
                               chat_id=message.chat.id, reply_markup=keyboard)
        await DeleteGroup.waiting_for_delete_group.set()
    else:
        msg = "–í—ã –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É \"–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É\" –≤ –º–µ–Ω—é!"
        await bot.send_message(chat_id=message.chat.id, text=msg, reply_markup=markup_menu)


async def delete_group_chosen(message: types.Message, state: FSMContext):
    if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        await state.finish()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=markup_menu)
        return
    try:
        chat_to_delete = message.text
        url = ''
        for chat in moders[message.from_user.id].api.target_group:
            if chat.title.lower() == chat_to_delete.lower():
                url = 'https://t.me/' + chat.username
                chat_to_delete = chat
                break
        delete = delete_group_from_base(url)
        if delete:
            await bot.send_message(message.from_user.id, "–ì—Ä—É–ø–ø–∞ —É–¥–∞–ª–µ–Ω–∞", reply_markup=markup_menu)
            moders[message.from_user.id].api.target_group.remove(chat_to_delete)
            await state.finish()
            await moders[message.from_user.id].main_sender()
    except:
        print(traceback.format_exc())
        await bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫")
        await bot.delete_message(chat_id=message.from_user.id,
                                 message_id=message.message_id)
        return


def register_handlers_delete_group(dp: Dispatcher):
    dp.register_message_handler(delete_group_start, Text(equals="–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É", ignore_case=True), state="*")
    dp.register_message_handler(delete_group_start, commands="delete_group", state="*")
    dp.register_message_handler(delete_group_chosen, state=DeleteGroup.waiting_for_delete_group)


@dp.message_handler(commands=['menu'])
async def menu(message: types.Message):
    await bot.send_message(message.from_user.id, "–ú–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ", reply_markup=markup_menu)


@dp.message_handler(commands=['start'])
async def reg(message: types.Message):
    print(message)
    user = message.from_user
    moder = get_user(user.username)
    if moder:
        await bot.send_message(message.from_user.id, "–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
        moders[user.id] = Moder(API(moder[2], moder[3], moder[4]), user.id)
        moders[user.id].moder_id = user.id
        moders[user.id].username = user.username
        msgs = get_all_messages(user.id)
        if msgs:
            for msg in msgs:
                moders[user.id].all_messages_base[int(msg[1])] = {
                    "from_id": int(msg[2]),
                    "message": str(msg[3])
                }
        print(moders[user.id].all_messages_base)
        start_res = await moders[user.id].api.start()
        for chat in get_groups(user.username):
            await moders[user.id].api.get_chat(chat)
        print(moders[user.id].api.target_group)
        if start_res:
            await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ code_xxxxx",
                                   reply_markup=markup_receive_code)
        else:
            await bot.send_message(message.from_user.id, "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –ø–æ –∫–æ–¥—É", reply_markup=markup_menu)
            moders[user.id].active = True
            await moders[user.id].main_sender()
        time.sleep(0.5)
    else:
        moders[user.id] = Moder()
        moders[user.id].moder_id = user.id
        moders[user.id].username = user.username
        message_for_reg = "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞: @Mikhai_Maclay –∏ @crazysadboi\n" \
                          "–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ —Å—Å—ã–ª–∫–µ: \nhttps://my.telegram.org\n" \
                          "–í–æ—Ç –≥–∞–π–¥, –µ—Å–ª–∏ –Ω–µ —Ä–∞–∑–±–µ—Ä–µ—Ç–µ—Å—å: \n" \
                          "https://tlgrm.ru/docs/api/obtaining_api_id\n\n" \
                          "–ï—Å–ª–∏ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É  ‚¨á  "
        await bot.send_message(message.from_user.id, f"–ü—Ä–∏–≤–µ—Ç!\n {message_for_reg}", reply_markup=menu_markup_for_reg)


@dp.message_handler(content_types=["text"])
async def receive_message(message: types.Message):
    try:
        moders[message.from_user.id].last_message = message
    except KeyError:
        await bot.send_message(chat_id=message.chat.id, text='–í—ã –Ω–µ –≤ —Å–∏—Å—Ç–µ–º–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É:\n'
                                                             '/start')
    if message.from_user.id in moders.keys():
        if message.text == '–°–∫—Ä—ã—Ç—å –º–µ–Ω—é':
            await bot.send_message(chat_id=message.chat.id, text='–ú–µ–Ω—é —Å–∫—Ä—ã—Ç–æ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É:\n'
                                                                 '/menu', reply_markup=types.ReplyKeyboardRemove())
        if message.text == '–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É':
            await group_start(message)
        if message.text == '–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø':
            chats = moders[message.from_user.id].api.target_group
            if chats:
                msg = "–°–æ–æ–±—â–µ—Å—Ç–≤–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–º–∏:\n\n"
                i = 1
                for chat in chats:
                    msg += str(i) + '. ' + f'<a href="https://t.me/{chat.username}">{chat.title}</a>\n'
                    i += 1
                await bot.send_message(chat_id=message.chat.id, text=msg, parse_mode=types.ParseMode.HTML,
                                       disable_web_page_preview=True)
            else:
                msg = "–í—ã –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É \"–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É\" –≤ –º–µ–Ω—é!"
                await bot.send_message(chat_id=message.chat.id, text=msg)
        if message.text == '–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É':
            await delete_group_start(message)
        if message.text == '–í–∫–ª—é—á–∏—Ç—å/–í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞':
            if moders[message.from_user.id].active:
                msg = "–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω!"
                await bot.send_message(chat_id=message.chat.id, text=msg)
                moders[message.from_user.id].active = False
            else:
                msg = "–ë–æ—Ç –≤–∫–ª—é—á–µ–Ω!"
                await bot.send_message(chat_id=message.chat.id, text=msg)
                moders[message.from_user.id].active = True
        if message.text == '–û—Ç—á–µ—Ç':
            await bot.send_message(message.from_user.id,
                                   f'–ü—Ä–∏–Ω—è—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: '
                                   f'{moders[message.from_user.id].counter}\n')
            if moders[message.from_user.id].counter >= 38:
                await bot.send_message(message.from_user.id,
                                       f'–ù–æ—Ä–º–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω')
                moders[message.from_user.id].active = False
                moders[message.from_user.id].counter = 0


@dp.callback_query_handler(text="continue")
async def login(query: CallbackQuery):
    await bot.edit_message_reply_markup(chat_id=query.from_user.id,
                                        message_id=query.message.message_id,
                                        reply_markup=None)
    await bot.send_message(query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ api_id", reply_markup=markup_continue_after_id)


@dp.callback_query_handler(text="continue_id")
async def login(query: CallbackQuery):
    if moders[query.from_user.id].last_message.text.isdigit() and\
            len(moders[query.from_user.id].last_message.text) in range(7, 9):
        moders[query.from_user.id].api.api_id = int(moders[query.from_user.id].last_message.text)
        await bot.send_message(query.from_user.id, "api_id –ø—Ä–∏–Ω—è—Ç")
        time.sleep(0.5)
        await bot.send_message(query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ api_hash", reply_markup=markup_continue_after_hash)
    else:
        await bot.send_message(query.from_user.id, "–§–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≤–µ—Ä–µ–Ω\n–í–≤–µ–¥–∏—Ç–µ api_id –ø–æ–≤—Ç–æ—Ä–Ω–æ",
                               reply_markup=markup_continue_after_id_reload)
    await bot.delete_message(chat_id=query.from_user.id,
                             message_id=query.message.message_id)


@dp.callback_query_handler(text="continue_hash")
async def login(query: CallbackQuery):
    if moders[query.from_user.id].last_message.text.isalnum() and\
            len(moders[query.from_user.id].last_message.text) == 32:
        moders[query.from_user.id].api.api_hash = moders[query.from_user.id].last_message.text
        await bot.send_message(query.from_user.id, "api_hash –ø—Ä–∏–Ω—è—Ç")
        time.sleep(0.5)
        await bot.send_message(query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +xxxxxxxxxxx",
                               reply_markup=markup_continue_after_phone)
    else:
        await bot.send_message(query.from_user.id, "–§–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≤–µ—Ä–µ–Ω\n–í–≤–µ–¥–∏—Ç–µ api_hash –ø–æ–≤—Ç–æ—Ä–Ω–æ",
                               reply_markup=markup_continue_after_hash_reload)
    await bot.delete_message(chat_id=query.from_user.id,
                             message_id=query.message.message_id)


@dp.callback_query_handler(text="continue_phone")
async def login(query: CallbackQuery):
    last_message = moders[query.from_user.id].last_message.text
    if last_message[1:].isdigit() and\
            "+" in last_message:
        moders[query.from_user.id].api.phone = last_message
        start_res = await moders[query.from_user.id].api.start()
        if start_res:
            await bot.send_message(query.from_user.id, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏–Ω—è—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π "
                                                       "–∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ code_xxxxx",
                                   reply_markup=markup_receive_code)
        else:
            await bot.send_message(query.from_user.id, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏–Ω—è—Ç. –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –ø–æ –∫–æ–¥—É\n"
                                                       "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É",
                                   reply_markup=markup_continue_after_group)
            moder = moders[query.from_user.id]
            add_user_to_base([query.from_user.username, moder.api.api_id, moder.api.api_hash, moder.api.phone])
        time.sleep(0.5)
    else:
        await bot.send_message(query.from_user.id, "–§–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≤–µ—Ä–µ–Ω\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ",
                               reply_markup=markup_continue_after_phone_reload)
    await bot.delete_message(chat_id=query.from_user.id,
                             message_id=query.message.message_id)


@dp.callback_query_handler(text="receive_code")
async def login(query: CallbackQuery):
    check_msg = moders[query.from_user.id].last_message.text.split("_")[-1]
    if check_msg.isdigit() and len(check_msg) == 5:
        print(check_msg)
        await bot.send_message(query.from_user.id, "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç!")
        login_res = await moders[query.from_user.id].api.login(check_msg)
        if login_res:
            await bot.send_message(query.from_user.id, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É",
                                   reply_markup=markup_continue_after_group)
            if moders[query.from_user.id].api.target_group:
                moders[query.from_user.id].active = True
            moder = moders[query.from_user.id]
            add_user_to_base([query.from_user.username, moder.api.api_id, moder.api.api_hash, moder.api.phone])
        else:
            await bot.send_message(query.from_user.id, "–ù–µ —Ç–æ—Ç –∫–æ–¥!\n–í–≤–µ–¥–∏—Ç–µ"
                                                       " –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ",
                                   reply_markup=markup_receive_code_reload)
            await moders[query.from_user.id].api.code_again()
    else:
        await moders[query.from_user.id].api.code_again()
        await bot.send_message(query.from_user.id, "–§–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –≤–µ—Ä–µ–Ω\n–í–≤–µ–¥–∏—Ç–µ"
                                                   " –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ",
                               reply_markup=markup_receive_code_reload)
    await bot.delete_message(chat_id=query.from_user.id,
                             message_id=query.message.message_id)


@dp.callback_query_handler(text="accept_message")
async def accept(query: CallbackQuery):
    msg = moders[query.from_user.id].all_messages_base[query.message.message_id]
    try:
        username = await moders[query.from_user.id].api.client.get_entity(msg["from_id"])
        await bot.edit_message_reply_markup(chat_id=query.from_user.id,
                                            message_id=query.message.message_id,
                                            reply_markup=None)
        print(query.message)
        chats = moders[query.from_user.id].api.target_group
        chat = None
        for c in chats:
            if c.title in query.message.text:
                chat = c
                break

        if username.username is not None:
            moders[query.from_user.id].users.append(username.username)
            moders[query.from_user.id].counter += 1
            await moders[query.from_user.id].api.client.send_message(username.username, msg["message"])
            await moders[query.from_user.id].api.client.send_message(username.username, spam_text[0])
            await moders[query.from_user.id].api.client.send_message(username.username, spam_text[1])
            if chat:
                res_msg = f'@{username.username}\n'\
                          f'–ß–∞—Ç: <a href="https://t.me/{chat.username}">{chat.title}</a>\n' \
                          f'–°–æ–æ–±—â–µ–Ω–∏–µ:\n' \
                          f'{msg["message"]}'
            else:
                res_msg = f'@{username.username}\n' \
                          f'{query.message.text}'
            await bot.edit_message_text(text=res_msg,
                                        message_id=query.message.message_id, chat_id=query.from_user.id,
                                        parse_mode=types.ParseMode.HTML, disable_web_page_preview=True,
                                        entities=query.message.entities)
            if moders[query.from_user.id].counter == 35:
                await bot.send_message(moders[query.from_user.id].moder_id, f'–î–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –ø–æ –æ—Ç–∫—Ä—ã—Ç–∏—é 35 –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤')
            if moders[query.from_user.id].counter >= 38:
                await bot.send_message(moders[query.from_user.id].moder_id,
                                       f'–ü—Ä–∏–Ω—è—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {moders[query.from_user.id].counter}\n'
                                       f'–ù–æ—Ä–º–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω')
                moders[query.from_user.id].active = False
        else:
            res_msg = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º\n' \
                      f'–ß–∞—Ç: <a href="https://t.me/{chat.username}">{chat.title}</a>\n' \
                      f'–°–æ–æ–±—â–µ–Ω–∏–µ:\n' \
                      f'{msg.message}'
            await bot.edit_message_text(text=res_msg,
                                        message_id=query.message.message_id, chat_id=query.from_user.id,
                                        parse_mode=types.ParseMode.HTML, disable_web_page_preview=True,
                                        entities=query.message.entities)
    except:
        await bot.edit_message_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç—ã–º –∞–∫–∫–∞—É–Ω—Ç–æ–º\n{query.message.text}",
                                    message_id=query.message.message_id, chat_id=query.from_user.id,
                                    parse_mode=types.ParseMode.HTML, disable_web_page_preview=True,
                                    entities=query.message.entities)


@dp.callback_query_handler(text="decline_message")
async def decline(query: CallbackQuery):
    await bot.delete_message(chat_id=query.from_user.id,
                             message_id=query.message.message_id)


if __name__ == "__main__":
    register_handlers_add_group(dp)
    register_handlers_delete_group(dp)
    executor.start_polling(dp)
